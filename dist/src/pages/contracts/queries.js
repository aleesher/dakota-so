"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var constants_1 = require("./constants");
exports.FETCH_CONTRACTS = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    query contracts(\n        $skip: Int = 0,\n        $perPage: Int = ", ",\n        $where: ServiceContractWhereInput,\n        $orderBy: ServiceContractOrderByInput\n    ) {\n        serviceContracts(\n            skip: $skip\n            first: $perPage\n            where: $where\n            orderBy: $orderBy\n        ) {\n            id\n            code\n            description\n            address\n            roofAddress\n            roofCity\n            customerCode\n            name\n            name2\n            city\n            billedAmount\n            totalCost\n            endingDate\n            firstYearMaintenance\n            maintenanceMonth\n            readySO\n            openedSO\n            createdSO\n            acknowledgedSO\n            percentageReady\n            workingHours\n            spendHours\n            hoursSpentLastYear\n            totalCost\n            m2Dak\n            m2DakReady\n            m2DakReadyPercent\n            outsourced\n            initialSalesAmount\n            isLocked\n            lockedBy\n        }\n        serviceContractsConnection(\n            where: $where\n        ) {\n            aggregate {\n                count\n            }\n        }\n\n    }\n"], ["\n    query contracts(\n        $skip: Int = 0,\n        $perPage: Int = ", ",\n        $where: ServiceContractWhereInput,\n        $orderBy: ServiceContractOrderByInput\n    ) {\n        serviceContracts(\n            skip: $skip\n            first: $perPage\n            where: $where\n            orderBy: $orderBy\n        ) {\n            id\n            code\n            description\n            address\n            roofAddress\n            roofCity\n            customerCode\n            name\n            name2\n            city\n            billedAmount\n            totalCost\n            endingDate\n            firstYearMaintenance\n            maintenanceMonth\n            readySO\n            openedSO\n            createdSO\n            acknowledgedSO\n            percentageReady\n            workingHours\n            spendHours\n            hoursSpentLastYear\n            totalCost\n            m2Dak\n            m2DakReady\n            m2DakReadyPercent\n            outsourced\n            initialSalesAmount\n            isLocked\n            lockedBy\n        }\n        serviceContractsConnection(\n            where: $where\n        ) {\n            aggregate {\n                count\n            }\n        }\n\n    }\n"])), constants_1.PER_PAGE);
exports.GET_CONTACT_DATA = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  query getContactCode($where: ServiceContractWhereUniqueInput!) {\n    serviceContract(where: $where) {\n      code\n      isLocked\n      lockedBy\n      address\n      roofAddress\n      roofCity\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n    }\n  }\n"], ["\n  query getContactCode($where: ServiceContractWhereUniqueInput!) {\n    serviceContract(where: $where) {\n      code\n      isLocked\n      lockedBy\n      address\n      roofAddress\n      roofCity\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n    }\n  }\n"])));
exports.CREATE_CONTRACT = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  mutation createServiceContract($data: ServiceContractCreateInput!) {\n    createServiceContract(data: $data) {\n      id\n      code\n    }\n  }\n"], ["\n  mutation createServiceContract($data: ServiceContractCreateInput!) {\n    createServiceContract(data: $data) {\n      id\n      code\n    }\n  }\n"])));
exports.DUBLICATE_CONTRACT = graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  mutation createServiceContract($data: ServiceContractCreateInput!) {\n    createServiceContract(data: $data) {\n      id\n      code\n      address\n      roofAddress\n      roofCity\n      customerCode\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n      lockedBy\n    }\n  }\n"], ["\n  mutation createServiceContract($data: ServiceContractCreateInput!) {\n    createServiceContract(data: $data) {\n      id\n      code\n      address\n      roofAddress\n      roofCity\n      customerCode\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n      lockedBy\n    }\n  }\n"])));
exports.CREATE_CO_INDEXING = graphql_tag_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  mutation createServiceContractIndex($data: ServiceContractIndexCreateInput!) {\n    createServiceContractIndex(data: $data) {\n      id\n      indexMethod\n      indexTime\n      indexedAmount\n      indexFigure\n      contractNumber\n      contractAmount\n    }\n  }\n"], ["\n  mutation createServiceContractIndex($data: ServiceContractIndexCreateInput!) {\n    createServiceContractIndex(data: $data) {\n      id\n      indexMethod\n      indexTime\n      indexedAmount\n      indexFigure\n      contractNumber\n      contractAmount\n    }\n  }\n"])));
exports.FETCH_ALL_CONTRACTS = graphql_tag_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  query allContracts(\n    $skip: Int = 0,\n    $perPage: Int = ", ",\n    $where: ServiceContractWhereInput,\n    $orderBy: ServiceContractOrderByInput\n  ) {\n    allServiceContracts(\n      skip: $skip\n      first: $perPage\n      where: $where\n      orderBy: $orderBy\n    ) {\n      id\n      code\n      description\n      address\n      roofAddress\n      roofCity\n      customerCode\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n      lockedBy\n    }\n    serviceContractsConnection(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"], ["\n  query allContracts(\n    $skip: Int = 0,\n    $perPage: Int = ", ",\n    $where: ServiceContractWhereInput,\n    $orderBy: ServiceContractOrderByInput\n  ) {\n    allServiceContracts(\n      skip: $skip\n      first: $perPage\n      where: $where\n      orderBy: $orderBy\n    ) {\n      id\n      code\n      description\n      address\n      roofAddress\n      roofCity\n      customerCode\n      name\n      name2\n      city\n      billedAmount\n      totalCost\n      endingDate\n      firstYearMaintenance\n      maintenanceMonth\n      readySO\n      openedSO\n      createdSO\n      acknowledgedSO\n      percentageReady\n      workingHours\n      spendHours\n      hoursSpentLastYear\n      totalCost\n      m2Dak\n      m2DakReady\n      m2DakReadyPercent\n      outsourced\n      initialSalesAmount\n      isLocked\n      lockedBy\n    }\n    serviceContractsConnection(where: $where) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])), constants_1.PER_PAGE);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=queries.js.map